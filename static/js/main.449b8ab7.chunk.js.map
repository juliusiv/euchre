{"version":3,"sources":["data/calculations.js","data/index.js","data/S2020.js","pages/AllTimeStatsPage/AllTimeStatsTable.js","pages/AllTimeStatsPage/index.js","pages/AllTimeStatsPage/AllTimeStatsPage.js","pages/TournamentPage/ScoresTable.js","pages/TournamentPage/ProgressionChart.js","pages/TournamentPage/index.js","pages/TournamentPage/TournamentPage.js","App.js","serviceWorker.js","index.js"],"names":["castScore","value","context","header","column","startsWith","parseInt","trim","TournamentScores","mapValues","S2020","csvData","shortName","data","parse","columns","cast","map","playerScores","orderedGames","reduce","result","score","game","slice","stats","totalScore","sum","gamesWon","shortSeason","year","longName","allPlayerData","gamesPlayedTo","AllTime","tournamentScores","playerStats","Object","values","forEach","name","hasOwnProperty","totalGamesWon","eloScore","firstPlaceFinishes","secondPlaceFinishes","thirdPlaceFinishes","averagePlace","calculateAllTimeStats","ScoresTable","className","useMemo","Header","accessor","tableInstance","useTable","initialState","sortBy","id","desc","disableSortRemove","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","AllTimeStatsPage","AllTimeStatsTable","gameColumns","entries","key","gameNumber","Colors","ProgressionChart","lineData","datum","i","cumulativeScores","index","push","x","y","color","width","height","padding","top","left","right","bottom","orientation","gutter","style","border","stroke","labels","fontSize","itemsPerRow","symbol","fill","TournamentPage","App","useState","scoresKey","setScoresKey","sortedScores","sort","a","b","options","concat","label","customSelectStyles","option","styles","cursor","backgroundColor","control","Red","children","defaultValue","onChange","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.449b8ab7.chunk.js","sourcesContent":["import parse from 'csv-parse/lib/sync'\nimport reduce from 'lodash/reduce'\nimport sum from 'lodash/sum'\n\nconst castScore = (value, context) => {\n  const isScore = !context.header && context.column.startsWith(\"game\")\n  return isScore ? parseInt(value.trim()) : value\n}\n\nconst enhanceData = (csvData, shortName) => {\n  const gamesPlayedTo = 8\n\n  const data = parse(csvData, {columns: true, cast: castScore }).map(\n    playerScores => {\n      // const orderedGames = Object.entries(playerScores).reduce((result, [game, score]) => {\n      const orderedGames = reduce(playerScores, (result, score, game) => {\n        if (!game.startsWith(\"game\")) return result;\n\n        const gameNumber = parseInt(game.slice(4))\n        result[gameNumber - 1] = score\n\n        return result\n      }, [])\n      const totalScore = sum(orderedGames)\n      const gamesWon = reduce(orderedGames, (result, score) => result += score >= 8 ? 1 : 0, 0)\n\n      const stats = { totalScore, gamesWon }\n      return { stats, orderedGames, ...playerScores }\n    }\n  )\n\n  const shortSeason = shortName.slice(0, 1) === \"S\" ? \"Summer\" : \"Winter\"\n  const year = shortName.slice(1)\n\n  return {\n    longName: `${shortSeason} ${year}`,\n    shortName,\n    allPlayerData: data,\n    gamesPlayedTo\n  }\n}\n\nconst calculateAllTimeStats = (tournamentScores) => {\n  const playerStats = {}\n\n  for (const { allPlayerData } of Object.values(tournamentScores)) {\n    allPlayerData.forEach(({ name, stats }) => {\n      if (!playerStats.hasOwnProperty(name)) {\n        playerStats[name] = {\n          totalGamesWon: 0,\n          eloScore: \"?\",\n          firstPlaceFinishes: 0,\n          secondPlaceFinishes: 0,\n          thirdPlaceFinishes: 0,\n          averagePlace: 0,\n          name\n        }\n      }\n      \n      playerStats[name].totalGamesWon += stats.gamesWon\n    })\n  };\n\n  return playerStats\n}\n\nexport { calculateAllTimeStats, enhanceData }\n","import mapValues from 'lodash/mapValues'\n\nimport { calculateAllTimeStats , enhanceData } from \"data/calculations\"\nimport S2020 from \"data/S2020\";\n\nconst TournamentScores = mapValues({\n  S2020,\n}, enhanceData)\n\nconst AllTime = calculateAllTimeStats(TournamentScores)\n\n// const calculateEloScores = () => undefined\n\nexport default AllTime;\nexport { TournamentScores }\n","const Csv = `\nname,game1,game2,game3,game4,game5,game6,game7,game8,game9,game10,game11,game12,game13,game14,game15\nPete,0,    8,    9,    6,    8,    6,    4,    8,    8,    5,     9,     8,     9,     7,     8     \nBecky,2,   8,    8,    2,    8,    7,    6,    8,    9,    8,     8,     1,     8,     11,    8\nMarcia,1,  6,    9,    8,    7,    8,    8,    8,    3,    1,     0,     8,     8,     11,    5\nJimmy,9,   8,    9,    6,    2,    7,    8,    1,    7,    8,     8,     1,     4,     8,     8\nJulius,8,  8,    4,    8,    8,    8,    4,    8,    8,    7,     8,     7,     2,     3,     8\nAlex,9,    2,    5,    8,    3,    8,    8,    8,    3,    5,     5,     1,     8,     8,     2\nPatrick,2, 3,    8,    4,    2,    8,    8,    2,    5,    7,     5,     9,     8,     7,     8\nDeena,4,   6,    9,    4,    8,    7,    2,    6,    7,    8,     3,     8,     6,     3,     2\nAmy,4,     8,    6,    8,    8,    9,    4,    8,    8,    1,     9,     9,     8,     7,     9\nTerri,8,   8,    5,    8,    7,    8,    6,    8,    4,    9,     3,     1,     6,     9,     5\nJR,8,      8,    6,    6,    8,    5,    8,    6,    8,    8,     0,     4,     9,     9,     8\nDoug,8,    4,    6,    8,    3,    9,    8,    8,    5,    8,     3,     9,     6,     8,     5\nSkip,1,    8,    8,    2,    3,    5,    2,    1,    8,    9,     8,     9,     2,     8,     9\nJamie,8,   4,    4,    8,    8,    8,    4,    2,    9,    7,     8,     8,     4,     5,     5\nRich,0,    3,    8,    6,    3,    7,    8,    6,    4,    7,     3,     7,     8,     7,     5\nWebs,8,    2,    6,    8,    8,    8,    6,    6,    8,    8,     8,     4,     6,     5,     5\n`\n\nexport default Csv\n","import React, { useMemo } from 'react'\nimport { useTable, useSortBy } from 'react-table'\n\nconst ScoresTable = ({ data, className, ...props }) => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Player\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Games Won\",\n        accessor: \"totalGamesWon\",\n      },\n      {\n        Header: \"Elo Score\",\n        accessor: \"eloScore\"\n      },\n      {\n        Header: \"🥇\",\n        accessor: \"firstPlaceFinishes\",\n      },\n      {\n        Header: \"🥈\",\n        accessor: \"secondPlaceFinishes\",\n      },\n      {\n        Header: \"🥉\",\n        accessor: \"thirdPlaceFinishes\",\n      },\n      {\n        Header: \"Average Place\",\n        accessor: \"averagePlace\",\n      },\n    ],\n    []\n  )\n\n  const initialState = { sortBy: [{ id: \"totalGamesWon\", desc: true }]}\n  const tableInstance = useTable({ columns, data: Object.values(data), initialState, disableSortRemove: true }, useSortBy)\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = tableInstance\n\n  return (\n    // apply the table props\n    <table {...getTableProps()} className=\"w-all border border-gray-900\">\n      <thead className=\" -mt-8 h-8 bg-gray-400\">\n        {// Loop over the header rows\n        headerGroups.map(headerGroup => (\n          // Apply the header row props\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {// Loop over the headers in each row\n            headerGroup.headers.map(column => (\n              // Apply the header cell props\n              <th\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                className=\"pl-2 pr-2 pt-1 pb-1 border-gray-900 border-b border-r cursor-pointer\"\n              >\n                {// Render the header\n                column.render('Header')}\n                <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ▼'\n                        : ' ▲'\n                      : ''}\n                  </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      {/* Apply the table body props */}\n      <tbody {...getTableBodyProps()}>\n        {// Loop over the table rows\n        rows.map(row => {\n          // Prepare the row for display\n          prepareRow(row)\n          return (\n            // Apply the row props\n            <tr\n              {...row.getRowProps()}\n              className=\"pl-2 pr-2 pt-1 pb-1 border-gray-900 border-b border-r cursor-pointer even:bg-gray-300 odd:bg-gray-100\"\n            >\n              {// Loop over the rows cells\n              row.cells.map(cell => {\n                // Apply the cell props\n                return (\n                  <td {...cell.getCellProps()} className=\"pl-2 pr-2 pt-1 pb-1 border-gray-900 border-b border-r\">\n                    {// Render the cell contents\n                    cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  ) \n}\n\nexport default ScoresTable\n","import AllTimeStatsPage from \"./AllTimeStatsPage\"\n\nexport default AllTimeStatsPage\n","import React from \"react\"\n\nimport AllTimeStatsTable from \"./AllTimeStatsTable\"\n\nconst AllTimeStatsPage = ({ data, ...props }) => {\n  return (\n    <AllTimeStatsTable data={data} />\n  )\n}\n\nexport default AllTimeStatsPage\n","import React, { useMemo } from 'react'\nimport { useTable, useSortBy } from 'react-table'\n\nconst ScoresTable = ({ data, className, ...props }) => {\n  // Dynamically get the game columns because there may be 11 games one year and 15 the next.\n  const gameColumns = Object.entries(data[0]).reduce((result, [key, _value]) => {\n    if (!key.startsWith(\"game\")) return result;\n\n    const gameNumber = parseInt(key.slice(4))\n    result[gameNumber - 1] = {Header: `G${gameNumber}`, accessor: key}\n    return result;\n  }, [])\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Player\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Total\",\n        accessor: \"stats.totalScore\",\n        id: \"totalScore\"\n      },\n      ...gameColumns\n    ],\n    // The dependency is `data` instead of `gameColumns` because the latter is derived from the\n    // former. Without this, we'll hit a maximum update depth error.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data]\n  )\n\n  const initialState = { sortBy: [{ id: \"totalScore\", desc: true }]}\n  const tableInstance = useTable({ columns, data, initialState, disableSortRemove: true }, useSortBy)\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = tableInstance\n\n  return (\n    // apply the table props\n    <table {...getTableProps()} className=\"w-all border border-gray-900\">\n      <thead className=\" -mt-8 h-8 bg-gray-400\">\n        {// Loop over the header rows\n        headerGroups.map(headerGroup => (\n          // Apply the header row props\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {// Loop over the headers in each row\n            headerGroup.headers.map(column => (\n              // Apply the header cell props\n              <th\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                className=\"pl-2 pr-2 pt-1 pb-1 border-gray-900 border-b border-r cursor-pointer\"\n              >\n                {// Render the header\n                column.render('Header')}\n                <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ▼'\n                        : ' ▲'\n                      : ''}\n                  </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      {/* Apply the table body props */}\n      <tbody {...getTableBodyProps()}>\n        {// Loop over the table rows\n        rows.map(row => {\n          // Prepare the row for display\n          prepareRow(row)\n          return (\n            // Apply the row props\n            <tr\n              {...row.getRowProps()}\n              className=\"pl-2 pr-2 pt-1 pb-1 border-gray-900 border-b border-r cursor-pointer even:bg-gray-300 odd:bg-gray-100\"\n            >\n              {// Loop over the rows cells\n              row.cells.map(cell => {\n                // Apply the cell props\n                return (\n                  <td {...cell.getCellProps()} className=\"pl-2 pr-2 pt-1 pb-1 border-gray-900 border-b border-r\">\n                    {// Render the cell contents\n                    cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  ) \n}\n\nexport default ScoresTable\n","import React, { useMemo } from \"react\"\nimport reduce from 'lodash/reduce'\n\nimport { VictoryChart, VictoryLegend, VictoryLine } from \"victory\"\n\nconst Colors = [\n  \"#1a202c\",  // black\n  \"#718096\",  // gray\n  \"#c53030\",  // red\n  \"#dd6b20\",  // orange\n  \"#f6e05e\",  // yellow\n  \"#b7791f\",  // dark yellow\n  \"#c6f6d5\",  // light green\n  \"#2f855a\",  // green\n  \"#319795\",  // teal\n  \"#90cdf4\",  // light blue\n  \"#3182ce\",  // blue\n  \"#4c51bf\",  // indigo\n  \"#805ad5\",  // purple\n  \"#ed64a6\",  // pink,\n  \"#7b341e\",  // brown\n\n]\n\nconst ProgressionChart = ({ data, ...props }) => {\n  const lineData = useMemo(() => data.map((datum, i) => {\n    const cumulativeScores = reduce(datum.orderedGames, (result, value, index) => {\n      result.push({ x: index + 1, y: result[index].y + value })\n      return result\n    }, [{ x: 0, y: 0 }])\n\n    return {\n      name: datum.name,\n      cumulativeScores,\n      color: Colors[i]\n    }\n  }), [data])\n\n  return (\n    <div>\n      <h3 className=\"text-3xl font-bold pb-4\">Scores Over Time</h3>\n\n      <VictoryChart\n        width={550}\n        height={300}\n        padding={{ top: 0, left: 35, right: 0, bottom: 35 }}\n      >\n        <VictoryLegend x={60} y={20}\n          orientation=\"horizontal\"\n          gutter={15}\n          style={{ border: { stroke: \"black\" }, labels: {fontSize: 10 } }}\n          itemsPerRow={4}\n          data={lineData.map(({ name, color }) => {\n            return { name, symbol: { fill: color } }\n          })}\n        />\n        {lineData.map(({ name, color, cumulativeScores }) => {\n          return (\n            <VictoryLine\n              key={name}\n              style={{\n                data: { stroke: color }\n              }}\n              data={cumulativeScores}\n            />\n          )\n        })}\n      </VictoryChart>\n    </div>\n  )\n}\n\nexport default ProgressionChart\n","import TournamentPage from \"./TournamentPage\"\n\nexport default TournamentPage\n","import React from \"react\"\n\nimport ScoresTable from \"./ScoresTable\"\nimport ProgressionChart from \"./ProgressionChart\"\n\nconst TournamentPage = ({ data, ...props }) => {\n  return (\n    <div>\n      <ScoresTable data={data} />\n\n      <div className=\"pt-8\">\n        <ProgressionChart data={data} />\n      </div>\n    </div>\n  )\n}\n\nexport default TournamentPage\n","import React, { useState } from 'react'\n\nimport concat from 'lodash/concat'\nimport Select from 'react-select'\n\nimport AllTime, { TournamentScores } from 'data'\n\nimport { AllTimeStatsPage, TournamentPage } from \"pages\"\n\nconst App = () => {\n  const [scoresKey, setScoresKey] = useState(\"AllTime\")\n  const data = scoresKey === \"AllTime\" ? AllTime : TournamentScores[scoresKey]\n\n  const sortedScores = Object.entries(TournamentScores).sort((a, b) => (a.color > b.color) ? 1 : -1)\n  const options = concat(\n    [{ label: \"All Time Scores\", value: \"AllTime\" }],\n    sortedScores.map(([key, value]) => ({ label: value.longName, value: key })\n  ))\n\n  const customSelectStyles = {\n    option: (styles) => ({\n      ...styles,\n      cursor: 'pointer',\n      color: \"#1a202c\",\n      backgroundColor: null,\n      \":hover\": {\n        ...styles[\":hover\"],\n        backgroundColor: \"#cbd5e0\"\n      }\n    }),\n    control: (styles) => ({\n      ...styles,\n      cursor: 'pointer',\n    }),\n  }\n\n  const Red = ({ children }) => <span className=\"text-red-500\">{children}</span>\n\n  return (\n    <div className=\"align-center bg-gray-100 text-gray-900 min-h-100vh flex flex-col items-center\">\n      <div className=\"w-7/12 flex flex-col\">\n        <header className=\"w-full font-bold mb-8 pt-4\">\n          <h1 className=\"text-4xl float-left\">\n            Euchre Stats ♠ <Red>♥</Red> ♦ <Red>♣</Red>\n          </h1>\n        </header>\n\n        <Select\n          options={options}\n          defaultValue={options[0]}\n          className=\"float-left w-64 mb-8\"\n          onChange={({ value }) => setScoresKey(value)}\n          styles={customSelectStyles}\n        />\n        \n        {scoresKey === \"AllTime\"\n          ? <AllTimeStatsPage data={data} />\n          : <TournamentPage data={data.allPlayerData} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}